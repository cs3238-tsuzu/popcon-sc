package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ContestInfo contest info
// swagger:model ContestInfo
type ContestInfo struct {

	// Contest Type
	// Required: true
	ContestType *string `json:"contestType"`

	// Contest Finish Time
	// Required: true
	FinishTime *string `json:"finishTime"`

	// Penalty for AtCoder and ICPC
	// Required: true
	Penalty *int64 `json:"penalty"`

	// Contest Start Time
	// Required: true
	StartTime *string `json:"startTime"`
}

// Validate validates this contest info
func (m *ContestInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContestType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFinishTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePenalty(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var contestInfoTypeContestTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["JOI","PCK","AtCoder","ICPC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contestInfoTypeContestTypePropEnum = append(contestInfoTypeContestTypePropEnum, v)
	}
}

const (
	// ContestInfoContestTypeJOI captures enum value "JOI"
	ContestInfoContestTypeJOI string = "JOI"
	// ContestInfoContestTypePCK captures enum value "PCK"
	ContestInfoContestTypePCK string = "PCK"
	// ContestInfoContestTypeAtCoder captures enum value "AtCoder"
	ContestInfoContestTypeAtCoder string = "AtCoder"
	// ContestInfoContestTypeICPC captures enum value "ICPC"
	ContestInfoContestTypeICPC string = "ICPC"
)

// prop value enum
func (m *ContestInfo) validateContestTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, contestInfoTypeContestTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ContestInfo) validateContestType(formats strfmt.Registry) error {

	if err := validate.Required("contestType", "body", m.ContestType); err != nil {
		return err
	}

	// value enum
	if err := m.validateContestTypeEnum("contestType", "body", *m.ContestType); err != nil {
		return err
	}

	return nil
}

func (m *ContestInfo) validateFinishTime(formats strfmt.Registry) error {

	if err := validate.Required("finishTime", "body", m.FinishTime); err != nil {
		return err
	}

	return nil
}

func (m *ContestInfo) validatePenalty(formats strfmt.Registry) error {

	if err := validate.Required("penalty", "body", m.Penalty); err != nil {
		return err
	}

	return nil
}

func (m *ContestInfo) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("startTime", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}
