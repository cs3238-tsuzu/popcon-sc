package swagger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetContestsCidJoinUIDHandlerFunc turns a function with the right signature into a get contests cid join UID handler
type GetContestsCidJoinUIDHandlerFunc func(GetContestsCidJoinUIDParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetContestsCidJoinUIDHandlerFunc) Handle(params GetContestsCidJoinUIDParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetContestsCidJoinUIDHandler interface for that can handle valid get contests cid join UID params
type GetContestsCidJoinUIDHandler interface {
	Handle(GetContestsCidJoinUIDParams, interface{}) middleware.Responder
}

// NewGetContestsCidJoinUID creates a new http.Handler for the get contests cid join UID operation
func NewGetContestsCidJoinUID(ctx *middleware.Context, handler GetContestsCidJoinUIDHandler) *GetContestsCidJoinUID {
	return &GetContestsCidJoinUID{Context: ctx, Handler: handler}
}

/*GetContestsCidJoinUID swagger:route GET /contests/{cid}/join/{uid} getContestsCidJoinUid

Get whether the user of 'uid' joins the contest of 'id'.


*/
type GetContestsCidJoinUID struct {
	Context *middleware.Context
	Handler GetContestsCidJoinUIDHandler
}

func (o *GetContestsCidJoinUID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetContestsCidJoinUIDParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
