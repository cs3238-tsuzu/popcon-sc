package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// SubmissionResult submission result
// swagger:model SubmissionResult
type SubmissionResult struct {

	// Judgement ID
	// Required: true
	Jid *int64 `json:"jid"`

	// Problem ID
	// Required: true
	Pid *int64 `json:"pid"`

	// Score
	// Required: true
	Score *int64 `json:"score"`

	// Submission ID
	// Required: true
	Sid *int64 `json:"sid"`

	// Result of Judgement
	// Required: true
	Status *string `json:"status"`

	// submit time
	// Required: true
	SubmitTime *string `json:"submitTime"`

	// User ID
	// Required: true
	UID *int64 `json:"uid"`
}

// Validate validates this submission result
func (m *SubmissionResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJid(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePid(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateScore(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSid(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubmitTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubmissionResult) validateJid(formats strfmt.Registry) error {

	if err := validate.Required("jid", "body", m.Jid); err != nil {
		return err
	}

	return nil
}

func (m *SubmissionResult) validatePid(formats strfmt.Registry) error {

	if err := validate.Required("pid", "body", m.Pid); err != nil {
		return err
	}

	return nil
}

func (m *SubmissionResult) validateScore(formats strfmt.Registry) error {

	if err := validate.Required("score", "body", m.Score); err != nil {
		return err
	}

	return nil
}

func (m *SubmissionResult) validateSid(formats strfmt.Registry) error {

	if err := validate.Required("sid", "body", m.Sid); err != nil {
		return err
	}

	return nil
}

var submissionResultTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Accepted","WrongAnswer","TimeLimitExceeded","MemoryLimitExceeded","RuntimeError","CompileError","InternalError"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		submissionResultTypeStatusPropEnum = append(submissionResultTypeStatusPropEnum, v)
	}
}

const (
	// SubmissionResultStatusAccepted captures enum value "Accepted"
	SubmissionResultStatusAccepted string = "Accepted"
	// SubmissionResultStatusWrongAnswer captures enum value "WrongAnswer"
	SubmissionResultStatusWrongAnswer string = "WrongAnswer"
	// SubmissionResultStatusTimeLimitExceeded captures enum value "TimeLimitExceeded"
	SubmissionResultStatusTimeLimitExceeded string = "TimeLimitExceeded"
	// SubmissionResultStatusMemoryLimitExceeded captures enum value "MemoryLimitExceeded"
	SubmissionResultStatusMemoryLimitExceeded string = "MemoryLimitExceeded"
	// SubmissionResultStatusRuntimeError captures enum value "RuntimeError"
	SubmissionResultStatusRuntimeError string = "RuntimeError"
	// SubmissionResultStatusCompileError captures enum value "CompileError"
	SubmissionResultStatusCompileError string = "CompileError"
	// SubmissionResultStatusInternalError captures enum value "InternalError"
	SubmissionResultStatusInternalError string = "InternalError"
)

// prop value enum
func (m *SubmissionResult) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, submissionResultTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SubmissionResult) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *SubmissionResult) validateSubmitTime(formats strfmt.Registry) error {

	if err := validate.Required("submitTime", "body", m.SubmitTime); err != nil {
		return err
	}

	return nil
}

func (m *SubmissionResult) validateUID(formats strfmt.Registry) error {

	if err := validate.Required("uid", "body", m.UID); err != nil {
		return err
	}

	return nil
}
