package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// RankingRow ranking row
// swagger:model RankingRow
type RankingRow struct {

	// all
	// Required: true
	All *RankingCell `json:"all"`

	// problems
	// Required: true
	Problems []*RankingCell `json:"problems"`

	// uid
	// Required: true
	UID *int64 `json:"uid"`
}

// Validate validates this ranking row
func (m *RankingRow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAll(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProblems(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RankingRow) validateAll(formats strfmt.Registry) error {

	if err := validate.Required("all", "body", m.All); err != nil {
		return err
	}

	if m.All != nil {

		if err := m.All.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *RankingRow) validateProblems(formats strfmt.Registry) error {

	if err := validate.Required("problems", "body", m.Problems); err != nil {
		return err
	}

	for i := 0; i < len(m.Problems); i++ {

		if swag.IsZero(m.Problems[i]) { // not required
			continue
		}

		if m.Problems[i] != nil {

			if err := m.Problems[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *RankingRow) validateUID(formats strfmt.Registry) error {

	if err := validate.Required("uid", "body", m.UID); err != nil {
		return err
	}

	return nil
}
