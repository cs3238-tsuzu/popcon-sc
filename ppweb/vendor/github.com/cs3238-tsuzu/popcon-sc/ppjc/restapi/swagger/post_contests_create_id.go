package swagger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostContestsCreateIDHandlerFunc turns a function with the right signature into a post contests create ID handler
type PostContestsCreateIDHandlerFunc func(PostContestsCreateIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostContestsCreateIDHandlerFunc) Handle(params PostContestsCreateIDParams) middleware.Responder {
	return fn(params)
}

// PostContestsCreateIDHandler interface for that can handle valid post contests create ID params
type PostContestsCreateIDHandler interface {
	Handle(PostContestsCreateIDParams) middleware.Responder
}

// NewPostContestsCreateID creates a new http.Handler for the post contests create ID operation
func NewPostContestsCreateID(ctx *middleware.Context, handler PostContestsCreateIDHandler) *PostContestsCreateID {
	return &PostContestsCreateID{Context: ctx, Handler: handler}
}

/*PostContestsCreateID swagger:route POST /contests/create/{id} postContestsCreateId

Create a ranking for the contest


*/
type PostContestsCreateID struct {
	Context *middleware.Context
	Handler PostContestsCreateIDHandler
}

func (o *PostContestsCreateID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostContestsCreateIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
