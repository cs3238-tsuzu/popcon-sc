package swagger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostContestsGetIDHandlerFunc turns a function with the right signature into a post contests get ID handler
type PostContestsGetIDHandlerFunc func(PostContestsGetIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostContestsGetIDHandlerFunc) Handle(params PostContestsGetIDParams) middleware.Responder {
	return fn(params)
}

// PostContestsGetIDHandler interface for that can handle valid post contests get ID params
type PostContestsGetIDHandler interface {
	Handle(PostContestsGetIDParams) middleware.Responder
}

// NewPostContestsGetID creates a new http.Handler for the post contests get ID operation
func NewPostContestsGetID(ctx *middleware.Context, handler PostContestsGetIDHandler) *PostContestsGetID {
	return &PostContestsGetID{Context: ctx, Handler: handler}
}

/*PostContestsGetID swagger:route POST /contests/get/{id} postContestsGetId

Get the address for the contest


*/
type PostContestsGetID struct {
	Context *middleware.Context
	Handler PostContestsGetIDHandler
}

func (o *PostContestsGetID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostContestsGetIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
