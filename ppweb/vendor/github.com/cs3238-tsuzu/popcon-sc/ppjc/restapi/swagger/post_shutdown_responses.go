package swagger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

/*PostShutdownOK Request has been accepted. The server will shutdown soon.

swagger:response postShutdownOK
*/
type PostShutdownOK struct {
}

// NewPostShutdownOK creates PostShutdownOK with default headers values
func NewPostShutdownOK() *PostShutdownOK {
	return &PostShutdownOK{}
}

// WriteResponse to the client
func (o *PostShutdownOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
}

/*PostShutdownForbidden Access denied. Your authentication is wrong.

swagger:response postShutdownForbidden
*/
type PostShutdownForbidden struct {
}

// NewPostShutdownForbidden creates PostShutdownForbidden with default headers values
func NewPostShutdownForbidden() *PostShutdownForbidden {
	return &PostShutdownForbidden{}
}

// WriteResponse to the client
func (o *PostShutdownForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
}

/*PostShutdownInternalServerError Internal server error

swagger:response postShutdownInternalServerError
*/
type PostShutdownInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPostShutdownInternalServerError creates PostShutdownInternalServerError with default headers values
func NewPostShutdownInternalServerError() *PostShutdownInternalServerError {
	return &PostShutdownInternalServerError{}
}

// WithPayload adds the payload to the post shutdown internal server error response
func (o *PostShutdownInternalServerError) WithPayload(payload string) *PostShutdownInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post shutdown internal server error response
func (o *PostShutdownInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostShutdownInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
